[
    {
        "id": "namespace-class-method-structure",
        "title": "Namespace-Class-Method Structure",
        "language": "csharp",
        "prompt": [
            "// Complete the basic program structure",
            "___1___ MyProgram {",
            "    ___2___ MyClass {",
            "        ___3___ void Main(string[] args) {",
            "            Console.WriteLine(\"Hello World\");",
            "        }",
            "    }",
            "}"
        ],
        "answers": [
            "namespace",
            "class",
            "static"
        ],
        "skills": [
            "Program scaffolding",
            "Entry point recognition",
            "Access modifiers"
        ],
        "common_errors": [
            "Incorrect method signature",
            "Missing brackets or keywords"
        ],
        "tags": [
            "C#",
            "Structure",
            "Syntax"
        ],
        "hint": "Recall the standard structure: namespace > class > static Main method.",
        "variables": [
            "MyProgram",
            "MyClass",
            "Main"
        ]
    },
    {
        "id": "parameter-passing-modes",
        "title": "Parameter Passing Modes",
        "language": "csharp",
        "prompt": [
            "// Identify how different parameters are passed",
            "static void Main(string[] args) {",
            "    int x = 5;",
            "    ___1___(x);",
            "    ___2___(ref x);",
            "    ___3___(out x);",
            "}",
            "",
            "static void ValuePass(___4___ int a) { a += 10; }",
            "static void RefPass(___5___ int b) { b += 10; }",
            "static void OutPass(___6___ int c) { c = 42; }"
        ],
        "answers": [
            "ValuePass",
            "RefPass",
            "OutPass",
            "",
            "ref",
            "out"
        ],
        "skills": [
            "ref",
            "out",
            "value",
            "pass by reference"
        ],
        "common_errors": [
            "Incorrect modifier usage",
            "Uninitialized out parameters"
        ],
        "tags": [
            "C#",
            "Parameters",
            "Functions"
        ],
        "hint": "Value is default, ref requires initialization, out must be assigned inside.",
        "variables": [
            "x",
            "a",
            "b",
            "c"
        ]
    },
    {
        "id": "value-vs-reference-types",
        "title": "Value vs Reference Types",
        "language": "csharp",
        "prompt": [
            "// Determine type classification and memory behavior",
            "// ___1___ types are stored on the stack and hold actual values",
            "// ___2___ types are stored on the heap and hold a reference (address)",
            "// Example of value type: ___3___",
            "// Example of reference type: ___4___"
        ],
        "answers": [
            "Value",
            "Reference",
            "int",
            "class"
        ],
        "skills": [
            "Stack vs Heap",
            "Memory model",
            "Primitive vs object types"
        ],
        "common_errors": [
            "Confusing value vs reference semantics",
            "Unintended shared references"
        ],
        "tags": [
            "C#",
            "Memory",
            "Data Types"
        ],
        "hint": "Value types (like int) store data directly; reference types (like class) store memory addresses.",
        "variables": [
            "Value",
            "Reference",
            "int",
            "class"
        ]
    },
    {
        "id": "if-else-structure",
        "title": "If-Else Structure",
        "language": "csharp",
        "prompt": [
            "// Fill in the control structure",
            "int score = 85;",
            "if (___1___ > 90) {",
            "    Console.WriteLine(\"A\");",
            "} else if (___1___ > 80) {",
            "    Console.WriteLine(\"B\");",
            "} else {",
            "    Console.WriteLine(\"C or lower\");",
            "}"
        ],
        "answers": [
            "score"
        ],
        "skills": [
            "Branching logic",
            "Condition evaluation"
        ],
        "common_errors": [
            "Incorrect if condition",
            "Missing else if or else"
        ],
        "tags": [
            "C#",
            "Control Flow",
            "Conditions"
        ],
        "hint": "Pay attention to comparison operators and variable reuse in conditions.",
        "variables": [
            "score"
        ]
    },
    {
        "id": "switch-case-syntax",
        "title": "Switch-Case Syntax",
        "language": "csharp",
        "prompt": [
            "// Fill in the correct structure and keywords",
            "int day = 3;",
            "___1___ (day) {",
            "    ___2___ 1:",
            "        Console.WriteLine(\"Monday\");",
            "        ___3___;",
            "    ___2___ 2:",
            "        Console.WriteLine(\"Tuesday\");",
            "        ___3___;",
            "    ___2___ 3:",
            "        Console.WriteLine(\"Wednesday\");",
            "        ___3___;",
            "    ___4___:",
            "        Console.WriteLine(\"Other Day\");",
            "        ___3___;",
            "}"
        ],
        "answers": [
            "switch",
            "case",
            "break",
            "default"
        ],
        "skills": [
            "Branching logic",
            "Matching values",
            "Using break"
        ],
        "common_errors": [
            "Missing break",
            "Omitting default case",
            "Syntax errors"
        ],
        "tags": [
            "C#",
            "Control Flow",
            "Switch"
        ],
        "hint": "Make sure to include switch keyword, case labels, break, and default structure.",
        "variables": [
            "day"
        ]
    }
]
